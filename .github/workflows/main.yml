name: Deploy

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ cloud-deploy ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    - name: Deploy using ssh
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: '22'
        script: |
          export DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}"
          export DOCKER_LOGIN="${{ secrets.DOCKER_LOGIN }}"
          export DOCKER_REGISTRY="${{ vars.DOCKER_REGISTRY }}"
          export DB_HOST="${{ vars.DB_HOST }}"
          export DB_PORT="${{ vars.DB_PORT }}"
          export DB_NAME="${{ vars.DB_NAME }}"
          export DB_USER="${{ vars.DB_USER }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export CLIENT_HOST="${{ vars.CLIENT_HOST }}"
          export CLIENT_PORT="${{ vars.CLIENT_PORT }}"
          export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          export JWT_ACCESS_TOKEN_EXPIRE_MINUTES="${{ vars.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}"
          export JWT_ALGORITHM="${{ vars.JWT_ALGORITHM }}"
          export SMTP_EMAIL="${{ secrets.SMTP_EMAIL }}"
          export SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}"
          export SMTP_HOST="${{ vars.SMTP_HOST }}"
          export SMTP_PORT="${{ vars.SMTP_PORT }}"
          export REDIS_HOST="${{ vars.REDIS_HOST }}"
          export REDIS_PORT="${{ vars.REDIS_PORT }}"
          export CELERY_BROKER_URL="${{ vars.CELERY_BROKER_URL }}"
          export CELERY_RESULT_BACKEND="${{ vars.CELERY_RESULT_BACKEND }}"
          export LOG_LEVEL="${{ vars.LOG_LEVEL }}"
          export LOG_FILE="${{ vars.LOG_FILE }}"
          export TEST_DB_HOST="${{ vars.TEST_DB_HOST }}"
          export TEST_DB_PORT="${{ vars.TEST_DB_PORT }}"
          export TEST_DB_NAME="${{ vars.TEST_DB_NAME }}"
          export TEST_DB_USER="${{ vars.TEST_DB_USER }}"
          export TEST_DB_PASSWORD="${{ vars.TEST_DB_PASSWORD }}"
          cd /var/www/html/taskwave;
          sudo git checkout cloud-deploy;
          sudo git pull;
          sudo git status;
          docker stop $(docker ps -aq)
          docker rm $(docker ps -aq)
          docker rmi $(docker images -aq)
          docker compose --file docker-compose.yaml build --no-cache;
          echo $(echo $SMTP_PASSWORD)
          echo $(echo $SMTP_HOST)
          DOCKER_PASSWORD=$DOCKER_PASSWORD \
            DOCKER_LOGIN=$DOCKER_LOGIN \
            DOCKER_REGISTRY=$DOCKER_REGISTRY \
            JWT_SECRET_KEY=$JWT_SECRET_KEY \
            JWT_ACCESS_TOKEN_EXPIRE_MINUTES=$JWT_ACCESS_TOKEN_EXPIRE_MINUTES \
            JWT_ALGORITHM=$JWT_ALGORITHM \
            SMTP_HOST=$SMTP_HOST \
            SMTP_PORT=$SMTP_PORT \
            SMTP_EMAIL=$SMTP_EMAIL \
            SMTP_PASSWORD=$SMTP_PASSWORD \
            DB_HOST=$DB_HOST \
            DB_PORT=$DB_PORT \
            DB_NAME=$DB_NAME \
            DB_USER=$DB_USER \
            DB_PASSWORD=$DB_PASSWORD \
            TEST_DB_HOST=$TEST_DB_HOST \
            TEST_DB_PORT=$TEST_DB_PORT \
            TEST_DB_NAME=$TEST_DB_NAME \
            TEST_DB_USER=$TEST_DB_USER \
            TEST_DB_PASSWORD=$TEST_DB_PASSWORD \
            CLIENT_HOST=$CLIENT_HOST \
            CLIENT_PORT=$CLIENT_PORT \
            REDIS_HOST=$REDIS_HOST \
            REDIS_PORT=$REDIS_PORT \
            CELERY_BROKER_URL=$CELERY_BROKER_URL \
            CELERY_RESULT_BACKEND=$CELERY_RESULT_BACKEND \
            LOG_LEVEL=$LOG_LEVEL \
            LOG_FILE=$LOG_FILE \
            docker compose --file docker-compose.yaml up -d;
